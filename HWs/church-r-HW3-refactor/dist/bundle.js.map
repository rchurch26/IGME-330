{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://church-r-hw3-refactor/./src/utils.ts","webpack://church-r-hw3-refactor/./src/enums/audio-defaults.enum.ts","webpack://church-r-hw3-refactor/./src/audio.ts","webpack://church-r-hw3-refactor/./src/classes/circleSprite.ts","webpack://church-r-hw3-refactor/./src/visualizer.ts","webpack://church-r-hw3-refactor/./src/enums/main-defaults.enum.ts","webpack://church-r-hw3-refactor/./src/main.ts"],"sourcesContent":["import ColorStop from \"./interfaces/colorStop.interface\";\r\n\r\nconst makeColor = (red:number, green:number, blue:number, alpha:number = 1) => {\r\n    return `rgba(${red},${green},${blue},${alpha})`;\r\n  };\r\n  \r\n  const getRandom = (min:number, max:number) => {\r\n    return Math.random() * (max - min) + min;\r\n  };\r\n  \r\n  const getRandomColor = () => {\r\n    const floor = 35; // so that colors are not too bright or too dark \r\n    const getByte = () => getRandom(floor,255-floor);\r\n    return `rgba(${getByte()},${getByte()},${getByte()},1)`;\r\n  };\r\n  \r\n  const getLinearGradient = (ctx:CanvasRenderingContext2D,startX:number,startY:number,endX:number,endY:number,colorStops:ColorStop[]) => {\r\n    let lg = ctx.createLinearGradient(startX,startY,endX,endY);\r\n    for(let stop of colorStops){\r\n      lg.addColorStop(stop.percent,stop.color);\r\n    }\r\n    return lg;\r\n  };\r\n  \r\n  const goFullscreen = (element:HTMLElement) => element.requestFullscreen();\r\n\r\n  const loadData = (callback:Function) =>\r\n{\r\n    const url = \"data/av-data.json\";\r\n    const xhr = new XMLHttpRequest();\r\n    xhr.onload = e =>\r\n    {\r\n        const target = e.target as XMLHttpRequest;\r\n        console.log(`In onload - HTTP Status Code = ${target.status}`);\r\n        let json;\r\n        try\r\n        {\r\n            json = JSON.parse(target.responseText);\r\n        }\r\n        catch\r\n        {\r\n            document.querySelector(\"#output\").innerHTML = \"JSON.parse() failed!\";\r\n            return;\r\n        }\r\n        callback(json);\r\n    }\r\n    xhr.onerror = e => \r\n    {\r\n      const target = e.target as XMLHttpRequest;\r\n      console.log(`In onerror - HTTP Status Code = ${target.status}`);\r\n    }\r\n    xhr.open(\"GET\", url);\r\n    xhr.send();\r\n}\r\n  \r\n  export {makeColor, getRandomColor, getLinearGradient, goFullscreen, loadData};","export enum DEFAULTS \r\n{\r\n    gain = .5,\r\n    numSamples = 256\r\n};","// 3a - actual enumeration\r\nimport { DEFAULTS } from \"./enums/audio-defaults.enum\";\r\n\r\n// 1 - our WebAudio context, **we will export and make this public at the bottom of the file**\r\nlet audioCtx:AudioContext;\r\n\r\n// **These are \"private\" properties - these will NOT be visible outside of this module (i.e. file)**\r\n// 2 - WebAudio nodes that are part of our WebAudio audio routing graph\r\nlet element:HTMLAudioElement, sourceNode:MediaElementAudioSourceNode, analyserNode:AnalyserNode, gainNode:GainNode, trebleBiquadFilter:BiquadFilterNode, bassBiquadFilter:BiquadFilterNode;\r\n\r\n// 3 - here we are faking an enumeration\r\n// const DEFAULTS = Object.freeze({\r\n//     gain    :       .5,\r\n//     numSamples  :   256\r\n// });\r\n\r\n// **Next are \"public\" methods - we are going to export all of these at the bottom of this file**\r\nconst setupWebaudio = (filePath:string) =>\r\n// 1 - The || is because WebAudio has not been standardized across browsers yet\r\n{\r\n    const AudioContext = window.AudioContext;\r\n    audioCtx = new AudioContext();\r\n\r\n// 2 - this creates an <audio> element\r\n    element = new Audio();\r\n\r\n// 3 - have it point at a sound file\r\n    loadSoundFile(filePath);\r\n\r\n// 4 - create an a source node that points at the <audio> element\r\n    sourceNode = audioCtx.createMediaElementSource(element);\r\n\r\n// 5 - create an analyser node\r\n    analyserNode = audioCtx.createAnalyser();// note the UK spelling of \"Analyser\"\r\n\r\n/*\r\n// 6\r\nWe will request DEFAULTS.numSamples number of samples or \"bins\" spaced equally \r\nacross the sound spectrum.\r\n\r\nIf DEFAULTS.numSamples (fftSize) is 256, then the first bin is 0 Hz, the second is 172 Hz, \r\nthe third is 344Hz, and so on. Each bin contains a number between 0-255 representing \r\nthe amplitude of that frequency.\r\n*/ \r\n\r\n// fft stands for Fast Fourier Transform\r\n    analyserNode.fftSize = DEFAULTS.numSamples;\r\n\r\n// 7 - create a gain (volume) node\r\n    gainNode = audioCtx.createGain();\r\n    gainNode.gain.value = DEFAULTS.gain;\r\n\r\n    //Create Treble BiquadFilter\r\n    trebleBiquadFilter = audioCtx.createBiquadFilter();\r\n    trebleBiquadFilter.type = \"highshelf\";\r\n    trebleBiquadFilter.frequency.setValueAtTime(1000,audioCtx.currentTime);\r\n    \r\n    //Create Bass BiquadFilter\r\n    bassBiquadFilter = audioCtx.createBiquadFilter();\r\n    bassBiquadFilter.type = \"lowshelf\";\r\n    bassBiquadFilter.frequency.setValueAtTime(1000,audioCtx.currentTime);\r\n\r\n// 8 - connect the nodes - we now have an audio graph\r\n    sourceNode.connect(trebleBiquadFilter);\r\n    trebleBiquadFilter.connect(bassBiquadFilter);\r\n    bassBiquadFilter.connect(analyserNode);\r\n    analyserNode.connect(gainNode);\r\n    gainNode.connect(audioCtx.destination);\r\n}\r\n\r\nconst loadSoundFile = (filePath:string) => element.src = filePath;\r\n\r\nconst playCurrentSound = () => element.play();\r\n\r\nconst pauseCurrentSound = () => element.pause();\r\n\r\nconst setVolume = (value:number) =>\r\n{\r\n    value = Number(value);// make sure that it's a Number rather than a String\r\n    gainNode.gain.value = value;\r\n}\r\n\r\nconst toggleTreble = (treble:boolean) =>\r\n{\r\n    if(treble)\r\n    {\r\n        trebleBiquadFilter.gain.setValueAtTime(25, audioCtx.currentTime);\r\n    }else\r\n    {\r\n        trebleBiquadFilter.gain.setValueAtTime(0, audioCtx.currentTime);\r\n    }\r\n}\r\n\r\nconst toggleBass = (bass:boolean) =>\r\n{\r\n    if(bass)\r\n    {\r\n        bassBiquadFilter.gain.setValueAtTime(15, audioCtx.currentTime);\r\n    }else\r\n    {\r\n        bassBiquadFilter.gain.setValueAtTime(0, audioCtx.currentTime);\r\n    }\r\n}\r\n\r\nexport{audioCtx,setupWebaudio,playCurrentSound,pauseCurrentSound,loadSoundFile,setVolume,analyserNode,trebleBiquadFilter,bassBiquadFilter,toggleTreble,toggleBass};","export default class circleSprite\r\n{\r\n    centerX:number;\r\n    centerY:number;\r\n    divergence:number;\r\n    c:number;\r\n    lifetime:number;\r\n    speed:number;\r\n    petalSize:number;\r\n\tconstructor(centerX,centerY,divergence,c,lifetime=100)\r\n\t{\r\n\t\tObject.assign(this, {centerX,centerY,divergence,c,lifetime});\r\n\t\tthis.speed = 1;\r\n        this.petalSize = 2;\r\n\t}\r\n\r\n    dtr(degrees:number){\r\n        return degrees * (Math.PI/180);\r\n    }\r\n\r\n    drawCircle(ctx:CanvasRenderingContext2D,x:number,y:number,radius:number,color:string){\r\n        ctx.save();\r\n        ctx.fillStyle = color;\r\n        ctx.beginPath();\r\n        ctx.arc(x,y,radius,0,Math.PI * 2);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n        ctx.restore();\r\n    }\r\n\r\n\tdraw(ctx:CanvasRenderingContext2D)\r\n\t{\r\n\t\tfor(let n=0; n < this.lifetime; n++)\r\n            {\r\n                let a = n * this.dtr(this.divergence);\r\n                let r = this.c * Math.sqrt(n);\r\n                let x = r * Math.cos(a) + this.centerX;\r\n                let y = r * Math.sin(a) + this.centerY;\r\n                let aDegrees = (n * this.divergence) % 361;\r\n                let color = `hsl(${aDegrees},100%,50%)`;\r\n                this.drawCircle(ctx,x,y,this.petalSize,color);\r\n                this.divergence += 2;\r\n                this.c += .0005;\r\n                this.petalSize += .005;\r\n            }\r\n\t}\r\n}","/*\r\n\tThe purpose of this file is to take in the analyser node and a <canvas> element: \r\n\t  - the module will create a drawing context that points at the <canvas> \r\n\t  - it will store the reference to the analyser node\r\n\t  - in draw(), it will loop through the data in the analyser node\r\n\t  - and then draw something representative on the canvas\r\n\t  - maybe a better name for this file/module would be *visualizer.js* ?\r\n*/\r\n\r\nimport * as utils from './utils';\r\nimport DrawParams from './interfaces/drawParams.interface';\r\nimport circleSprite from './classes/circleSprite';\r\nlet ctx:CanvasRenderingContext2D,canvasWidth:number,canvasHeight:number,analyserNode:AnalyserNode,audioData:Uint8Array;\r\nconst sprites = [];\r\n\r\nconst setupCanvas = (canvasElement:HTMLCanvasElement,analyserNodeRef:AnalyserNode) => {\r\n\t// create drawing context\r\n\tctx = canvasElement.getContext(\"2d\");\r\n\tcanvasWidth = canvasElement.width;\r\n\tcanvasHeight = canvasElement.height;\r\n\t// keep a reference to the analyser node\r\n\tanalyserNode = analyserNodeRef;\r\n\t// this is the array where the analyser data will be stored\r\n\taudioData = new Uint8Array(analyserNode.fftSize/2);\r\n\t//Create Sprites\r\n\tsprites.push(new circleSprite(200, 200, 137.4, 2, audioData.length/2));\r\n    sprites.push(new circleSprite(450, 200, 137.1, 1, audioData.length/2));\r\n}\r\n\r\nconst draw = (params:DrawParams) => {\r\n\tlet avgLoudness = 0;\r\n  // 1 - populate the audioData array with the frequency data from the analyserNode\r\n\t// notice these arrays are passed \"by reference\" \r\n\t//analyserNode.getByteFrequencyData(audioData);\r\n\t// OR\r\n\t//analyserNode.getByteTimeDomainData(audioData); // waveform data\r\n\t\r\n\tif(params.showWaveform) analyserNode.getByteTimeDomainData(audioData);\r\n\telse analyserNode.getByteFrequencyData(audioData);\r\n\t\r\n\t// 2 - draw background\r\n\tctx.save();\r\n    ctx.fillStyle = \"black\";\r\n    ctx.globalAlpha = 0.1;\r\n    ctx.fillRect(0,0,canvasWidth,canvasHeight);\r\n    ctx.restore();\r\n\r\n\t//Get average loudness\r\n\tfor(let i=0; i<audioData.length; i++)\r\n\t\t{\r\n\t\t\tavgLoudness += audioData[i];\r\n\t\t}\r\n\t// 4 - draw bars\r\n\tif(params.showBars)\r\n\t{\r\n\t\tlet barSpacing = 4;\r\n\t\tlet margin = 5;\r\n\t\tlet screenWidthForBars = canvasWidth - (audioData.length * barSpacing) - margin * 2;\r\n\t\tlet barWidth = screenWidthForBars / audioData.length;\r\n\t\tlet barHeight = 200;\r\n\t\tlet topSpacing = 100;\r\n\r\n\t\tctx.save();\r\n\t\tctx.fillStyle = 'rgba(255,255,255,0.50)';\r\n\t\tctx.strokeStyle = 'rgba(0,0,0,0.50)';\r\n\t\t//Loop through data and draw\r\n\t\tfor(let i=0; i<audioData.length; i++)\r\n\t\t{\r\n\t\t\tctx.fillRect(margin + i * (barWidth + barSpacing),topSpacing + 256-audioData[i],barWidth,barHeight);\r\n\t\t\tctx.strokeRect(margin + i * (barWidth + barSpacing),topSpacing + 256-audioData[i],barWidth,barHeight);\r\n\t\t\t//Possibly draw sprites\r\n\t\t}\r\n\t\tctx.restore();\r\n\t}\r\n\t\r\n\t// 5 - draw circles\r\n\tif(params.showCircles)\r\n\t{\r\n\t\tlet maxRadius = canvasHeight/4;\r\n\t\tctx.save();\r\n\t\tctx.globalAlpha = 0.5;\r\n\t\tfor(let i=0; i<audioData.length; i++)\r\n\t\t{\r\n\t\t\t//red-ish circles\r\n\t\t\tlet percent = audioData[i] / 255;\r\n\r\n\t\t\tlet circleRadius = percent * maxRadius;\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.fillStyle = utils.makeColor(255, 111, 111, 0.34 - percent/3.0);\r\n\t\t\tctx.arc(canvasWidth/2, canvasHeight/2, circleRadius, 0, 2 * Math.PI, false);\r\n\t\t\tctx.fill();\r\n\t\t\tctx.closePath();\r\n\r\n\t\t\t//blue-ish circles, bigger, more transparent\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.fillStyle = utils.makeColor(0, 0, 255, 0.10 - percent/10.0);\r\n\t\t\tctx.arc(canvasWidth/2, canvasHeight/2, circleRadius * 1.5, 0, 2 * Math.PI, false);\r\n\t\t\tctx.fill();\r\n\t\t\tctx.closePath();\r\n\r\n\t\t\t//yellow-ish circles, smaller\r\n\t\t\tctx.save();\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.fillStyle = utils.makeColor(200, 200, 0, 0.5 - percent/5.0);\r\n\t\t\tctx.arc(canvasWidth/2, canvasHeight/2, circleRadius * 0.5, 0, 2 * Math.PI, false);\r\n\t\t\tctx.fill();\r\n\t\t\tctx.closePath();\r\n\t\t\tctx.restore();\r\n\t\t}\r\n\t\tctx.restore();\r\n\t}\r\n\tavgLoudness = avgLoudness/audioData.length;\r\n\tsprites.forEach(s =>\r\n\t\t{\r\n\t\t\ts.petalSize = 0.05 + avgLoudness / 70;\r\n\t\t\ts.draw(ctx);\r\n\t\t})\r\n}\r\n\r\nconst drawOnClick = (x:number,y:number) =>\r\n{\r\n\tsprites.push(new circleSprite(x,y,135,1,audioData.length/2));\r\n\tlet latest = sprites.length - 1;\r\n\tsprites[latest].draw(ctx);\r\n}\r\n\r\nexport {setupCanvas,draw,drawOnClick};","export enum DEFAULTS\r\n{\r\n\tsound1 = \"media/New Adventure Theme.mp3\"\r\n};","/*\r\n\tmain.js is primarily responsible for hooking up the UI to the rest of the application \r\n\tand setting up the main event loop\r\n*/\r\n\r\n// We will write the functions in this file in the traditional ES5 way\r\n// In this instance, we feel the code is more readable if written this way\r\n// If you want to re-write these as ES6 arrow functions, to be consistent with the other files, go ahead!\r\n\r\nimport * as utils from './utils';\r\nimport * as audio from './audio';\r\nimport * as visualizer from './visualizer';\r\nimport DrawParams from './interfaces/drawParams.interface';\r\nimport { DEFAULTS } from './enums/main-defaults.enum';\r\n\r\nlet canvasElement = document.querySelector(\"canvas\"); // hookup <canvas> element\r\n\r\nconst drawParams:DrawParams = \r\n{\r\n  showBars      : true,\r\n  showCircles   : true,\r\n  showWaveform  : false\r\n};\r\n\r\n// 1 - here we are faking an enumeration\r\n// const DEFAULTS = Object.freeze({\r\n// \tsound1  :  \"media/New Adventure Theme.mp3\"\r\n// });\r\n\r\nconst init = json => {\r\n\tconsole.log(\"init called\");\r\n\tconsole.log(`Testing utils.getRandomColor() import: ${utils.getRandomColor()}`);\r\n  document.querySelector(\"#title\").innerHTML = json.title;\r\n  document.querySelector(\"#select-track\").innerHTML = json.sounds.map(s => `<option value=\"${s.file}\">${s.name}</option>`).join(\"\");\r\n  audio.setupWebaudio(DEFAULTS.sound1);\r\n\tsetupUI(canvasElement);\r\n  visualizer.setupCanvas(canvasElement,audio.analyserNode);\r\n  loop();\r\n}\r\n\r\nconst setupUI = (canvasElement:HTMLCanvasElement) => {\r\n  // A - hookup fullscreen button\r\n  const fsButton = document.querySelector(\"#btn-fs\") as HTMLButtonElement;\r\n  // B - hookup play button\r\n  const playButton = document.querySelector(\"#btn-play\") as HTMLButtonElement;\r\n  // C - hookup volume slider & label\r\n  let volumeSlider = document.querySelector(\"#slider-volume\") as HTMLInputElement;\r\n  let volumeLabel = document.querySelector(\"#label-volume\") as HTMLSpanElement;\r\n  //D - hookup track <select>\r\n  let trackSelect = document.querySelector(\"#select-track\") as HTMLSelectElement;\r\n\r\n  let waveSelect = document.querySelector(\"#select-form\") as HTMLSelectElement;\r\n  //Hookup checkboxes\r\n  let barsCB = document.querySelector(\"#cb-bars\") as HTMLInputElement;\r\n  let circlesCB = document.querySelector(\"#cb-circles\") as HTMLInputElement;\r\n  let trebleCB = document.querySelector(\"#cb-treble\") as HTMLInputElement;\r\n  let bassCB = document.querySelector(\"#cb-bass\") as HTMLInputElement;\r\n\t\r\n  // add .onclick event to button\r\n  fsButton.onclick = e => {\r\n    console.log(\"goFullscreen() called\");\r\n    utils.goFullscreen(canvasElement);\r\n  };\r\n\r\n  //Add .onclick event to button\r\n  playButton.onclick = e =>\r\n  {\r\n    const target = e.target as HTMLInputElement;\r\n    console.log(`audioCtx.state before = ${audio.audioCtx.state}`);\r\n\r\n    //Check if context is in suspended state (autoplay policy)\r\n    if(audio.audioCtx.state == \"suspended\")\r\n    {\r\n        audio.audioCtx.resume();\r\n    }\r\n    console.log(`audioCtx.state after = ${audio.audioCtx.state}`);\r\n    if(target.dataset.playing == \"no\")\r\n    {\r\n        //If track is paused, play it\r\n        audio.playCurrentSound();\r\n        target.dataset.playing = \"yes\";//CSS will set text to \"Pause\"\r\n        //If track is playing, pause it\r\n    }else\r\n    {\r\n        audio.pauseCurrentSound();\r\n        target.dataset.playing = \"no\";//CSS will set text to \"Play\"\r\n    }\r\n  };\r\n\r\n  // Add .oninput event to slider\r\n  volumeSlider.oninput = e =>\r\n  {\r\n    const target = e.target as HTMLInputElement;\r\n    //Set the gain\r\n    audio.setVolume(Number(target.value));\r\n    //Update value of label to match value of slider\r\n    //const sliderVal:Number = Math.round((target.value/2 * 100));\r\n    volumeLabel.innerHTML = String(Math.round((Number(target.value)/2 * 100)));\r\n  };\r\n  //Set value of label to match initial value of slider\r\n  volumeSlider.dispatchEvent(new Event(\"input\"));\r\n\r\n  //Add .onchange event to <select>\r\n  trackSelect.onchange = e =>\r\n  {\r\n    const target = e.target as HTMLInputElement;\r\n    audio.loadSoundFile(target.value);\r\n    //Pause the current track if it is playing\r\n    if(playButton.dataset.playing == \"yes\")\r\n    {\r\n        playButton.dispatchEvent(new MouseEvent(\"click\"));\r\n    }\r\n  }\r\n\r\n  waveSelect.onchange = e =>\r\n  {\r\n    const target = e.target as HTMLInputElement;\r\n    if(target.value == \"waveform-data\") drawParams.showWaveform = true;\r\n    else drawParams.showWaveform = false;\r\n  }\r\n\t\r\n  //Add .onclick event to checkboxes\r\n  barsCB.onclick = () =>\r\n  {\r\n    if(barsCB.checked) drawParams.showBars = true;\r\n    else drawParams.showBars = false;\r\n  }\r\n  circlesCB.onclick = () =>\r\n  {\r\n    if(circlesCB.checked) drawParams.showCircles = true;\r\n    else drawParams.showCircles = false;\r\n  }\r\n  trebleCB.onchange = e =>\r\n  {\r\n    const target = e.target as HTMLInputElement;\r\n    audio.toggleTreble(target.checked);\r\n  }\r\n  bassCB.onchange = e =>\r\n  {\r\n    const target = e.target as HTMLInputElement;\r\n    audio.toggleBass(target.checked);\r\n  }\r\n  canvasElement.onclick = e =>\r\n  {\r\n    const target = e.target as HTMLInputElement;\r\n    let rect = target.getBoundingClientRect();\r\n    let mouseX = e.clientX - rect.x;\r\n    let mouseY = e.clientY - rect.y;\r\n    visualizer.drawOnClick(mouseX, mouseY);\r\n  }\r\n} // end setupUI\r\n\r\nfunction loop(){\r\n    /* NOTE: This is temporary testing code that we will delete in Part II */\r\n        setTimeout(loop, 1000/60);\r\n        visualizer.draw(drawParams);\r\n}\r\n\r\nutils.loadData(init);\r\n\r\nexport {init};"],"names":["DEFAULTS","audioCtx","sourceNode","analyserNode","gainNode","trebleBiquadFilter","bassBiquadFilter","makeColor","red","green","blue","alpha","loadSoundFile","filePath","src","centerX","centerY","divergence","c","lifetime","Object","assign","this","speed","petalSize","dtr","degrees","Math","PI","drawCircle","ctx","x","y","radius","color","save","fillStyle","beginPath","arc","closePath","fill","restore","draw","n","a","r","sqrt","cos","sin","aDegrees","canvasWidth","canvasHeight","audioData","sprites","callback","xhr","canvasElement","document","querySelector","drawParams","showBars","showCircles","showWaveform","loop","setTimeout","params","avgLoudness","getByteTimeDomainData","getByteFrequencyData","globalAlpha","fillRect","i","length","barWidth","margin","strokeStyle","topSpacing","strokeRect","maxRadius","percent","circleRadius","forEach","s","json","AudioContext","getByte","console","log","random","innerHTML","title","sounds","map","file","name","join","sound1","window","Audio","createMediaElementSource","createAnalyser","fftSize","numSamples","createGain","gain","value","createBiquadFilter","type","frequency","setValueAtTime","currentTime","connect","destination","fsButton","playButton","volumeSlider","volumeLabel","trackSelect","waveSelect","barsCB","circlesCB","trebleCB","bassCB","onclick","e","requestFullscreen","target","state","resume","dataset","playing","play","pause","oninput","Number","String","round","dispatchEvent","Event","onchange","MouseEvent","checked","rect","getBoundingClientRect","push","latest","clientX","clientY","setupUI","analyserNodeRef","getContext","width","height","Uint8Array","XMLHttpRequest","onload","status","JSON","parse","responseText","onerror","open","send"],"sourceRoot":""}